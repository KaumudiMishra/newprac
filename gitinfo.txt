📄  GIT WORKFLOW NOTES (Windows PowerShell)  📄
Save or print this plain‑text file for quick reference.
────────────────────────────────────────────────────────

1.  CREATE A NEW FOLDER & FILES
    ----------------------------------------------------
    > mkdir newprac          # make directory on Desktop
    > cd newprac             # enter the folder

    > touch ch1.txt          # create an empty file
    > ls                     # list visible items
    PowerShell tip: use  ls -Force  to show hidden files
                           (‑a works in Bash, not here).

2.  OPEN A FILE IN VS CODE
    ----------------------------------------------------
    > code ch1.txt           # launches VS Code with ch1.txt

3.  INITIALISE A GIT REPOSITORY
    ----------------------------------------------------
    > git init               # creates .git folder

4.  CHECK FILE STATUS
    ----------------------------------------------------
    > git status
      • **red**  = untracked / modified, not staged  
      • **green**= staged, ready to commit

5.  STAGE & COMMIT A SINGLE FILE
    ----------------------------------------------------
    > git add ch1.txt        # move ch1.txt to staging area
    > git commit -m "complete ch1"
      └─ First commit message (imperative, present‑tense)

    ✱ If Git asks for your identity:
      > git config --global user.name  "Your Name"
      > git config --global user.email "you@example.com"

6.  VIEW COMMIT HISTORY
    ----------------------------------------------------
    > git log                # shows SHA, author, date, message

7.  ADD MORE FILES & STAGE EVERYTHING AT ONCE
    ----------------------------------------------------
    > touch ch2.txt ch3.txt ch4.txt democh.txt
    > git status             # see new + modified files
    > git add .              # “.” stages ALL changes
    > git commit -m "add ch2‑ch4 and demo file"

8.  CONNECT TO A REMOTE REPOSITORY (GitHub)
    ----------------------------------------------------
    Syntax:   git remote add <name> <URL>
    Example:
      > git remote add origin https://github.com/KaumudiMishra/newprac.git

9.  PUSH FIRST TIME & SET UPSTREAM
    ----------------------------------------------------
    > git push -u origin main
      • -u links local *main* branch to remote *origin/main*
      • Subsequent pushes can be just:  git push

────────────────────────────────────────────────────────
QUICK COMMAND CHEAT‑SHEET
────────────────────────────────────────────────────────
mkdir <dir>              create folder
cd <dir>                 change directory
touch <file>             create empty file
ls / ls -Force           list files (‑Force shows hidden)
code <file>              open file in VS Code
git init                 start a repo
git status               view file states
git add <file> | .       stage file(s)
git commit -m "msg"      commit staged changes
git log                  show history
git config --global ...  set username / email
git remote add origin URL connect remote
git push -u origin main  push + set upstream
git push                 push again later
────────────────────────────────────────────────────────
Keep this sheet handy while working in PowerShell + Git!

📝 GITIGNORE - SIMPLE NOTES

WHAT IS .gitignore?

- A special file used by Git to ignore certain files/folders.
- Helps prevent accidental upload of:
  • Secrets (API keys, passwords)
  • System files (like .DS_Store)
  • Temporary or config files
  • Large folders like node_modules

---------------------------

HOW TO CREATE A PROJECT AND USE .gitignore

1. Open Terminal
2. Go to Desktop:
   cd Desktop

3. Make new project folder:
   mkdir Project
   cd Project

4. Create example files:
   touch file1.txt file2.txt file3.txt secrets.txt

5. Create .gitignore file:
   touch .gitignore

6. Open .gitignore:
   code .gitignore  (or use any text editor)

---------------------------

WHAT TO WRITE IN .gitignore?

# Comments start with #
# Ignore secret files
secrets.txt

# Ignore macOS settings file
.DS_Store

# Ignore a folder
node_modules/

# Ignore all .log files
*.log

---------------------------

COMMON EXAMPLE:
For a Node.js project:
-----------------------
node_modules/
.env
.DS_Store
*.log

---------------------------

GIT COMMANDS WORKFLOW

1. Initialize Git:
   git init

2. Add all files:
   git add .

3. See what's staged:
   git status

⚠️ If secrets.txt or other unwanted files show up, fix your .gitignore first!

4. To unstage everything (before commit):
   git rm --cached -r .

5. Add again (now gitignore will be respected):
   git add .

6. Commit:
   git commit -m "Initial commit"

---------------------------

TIPS

✔ Always use lowercase: `.gitignore` (name matters!)
✔ Use `ls -a` to see hidden files
✔ Check status before committing with `git status`
✔ Use prebuilt gitignore templates from:
   https://github.com/github/gitignore

---------------------------

WHY IS IT IMPORTANT?

- Protects your sensitive data
- Keeps your repo clean
- Avoids uploading unnecessary files to GitHub
