📄  GIT WORKFLOW NOTES (Windows PowerShell)  📄
Save or print this plain‑text file for quick reference.
────────────────────────────────────────────────────────

1.  CREATE A NEW FOLDER & FILES
    ----------------------------------------------------
    > mkdir newprac          # make directory on Desktop
    > cd newprac             # enter the folder

    > touch ch1.txt          # create an empty file
    > ls                     # list visible items
    PowerShell tip: use  ls -Force  to show hidden files
                           (‑a works in Bash, not here).

2.  OPEN A FILE IN VS CODE
    ----------------------------------------------------
    > code ch1.txt           # launches VS Code with ch1.txt

3.  INITIALISE A GIT REPOSITORY
    ----------------------------------------------------
    > git init               # creates .git folder

4.  CHECK FILE STATUS
    ----------------------------------------------------
    > git status
      • **red**  = untracked / modified, not staged  
      • **green**= staged, ready to commit

5.  STAGE & COMMIT A SINGLE FILE
    ----------------------------------------------------
    > git add ch1.txt        # move ch1.txt to staging area
    > git commit -m "complete ch1"
      └─ First commit message (imperative, present‑tense)

    ✱ If Git asks for your identity:
      > git config --global user.name  "Your Name"
      > git config --global user.email "you@example.com"

6.  VIEW COMMIT HISTORY
    ----------------------------------------------------
    > git log                # shows SHA, author, date, message

7.  ADD MORE FILES & STAGE EVERYTHING AT ONCE
    ----------------------------------------------------
    > touch ch2.txt ch3.txt ch4.txt democh.txt
    > git status             # see new + modified files
    > git add .              # “.” stages ALL changes
    > git commit -m "add ch2‑ch4 and demo file"

8.  CONNECT TO A REMOTE REPOSITORY (GitHub)
    ----------------------------------------------------
    Syntax:   git remote add <name> <URL>
    Exampl
      > git remote add origin https://github.com/KaumudiMishra/newprac.git

9.  PUSH FIRST TIME & SET UPSTREAM
    ----------------------------------------------------
    > git push -u origin main
      • -u links local *main* branch to remote *origin/main*
      • Subsequent pushes can be just:  git push

────────────────────────────────────────────────────────
QUICK COMMAND CHEAT‑SHEET
────────────────────────────────────────────────────────
mkdir <dir>              create folder
cd <dir>                 change directory
touch <file>             create empty file
ls / ls -Force           list files (‑Force shows hidden)
code <file>              open file in VS Code
git init                 start a repo
git status               view file states
git add <file> | .       stage file(s)
git commit -m "msg"      commit staged changes
git log                  show history
git config --global ...  set username / email
git remote add origin URL connect remote
git push -u origin main  push + set upstream
git push                 push again later
────────────────────────────────────────────────────────
Keep this sheet handy while working in PowerShell + Git!


----------------------------------------------------------------------------------------
📝 GITIGNORE - SIMPLE NOTES

WHAT IS .gitignore?

- A special file used by Git to ignore certain files/folders.
- Helps prevent accidental upload of:
  • Secrets (API keys, passwords)
  • System files (like .DS_Store)
  • Temporary or config files
  • Large folders like node_modules

---------------------------

HOW TO CREATE A PROJECT AND USE .gitignore

1. Open Terminal
2. Go to Desktop:
   cd Desktop

3. Make new project folder:
   mkdir Project
   cd Project

4. Create example files:
   touch file1.txt file2.txt file3.txt secrets.txt

5. Create .gitignore file:
   touch .gitignore

6. Open .gitignore:
   code .gitignore  (or use any text editor)

---------------------------

WHAT TO WRITE IN .gitignore?

# Comments start with #
# Ignore secret files
secrets.txt

# Ignore macOS settings file
.DS_Store

# Ignore a folder
node_modules/

# Ignore all .log files
*.log

---------------------------

COMMON EXAMPLE:
For a Node.js project:
-----------------------
node_modules/
.env
.DS_Store
*.log

---------------------------

GIT COMMANDS WORKFLOW

1. Initialize Git:
   git init

2. Add all files:
   git add .

3. See what's staged:
   git status

⚠️ If secrets.txt or other unwanted files show up, fix your .gitignore first!

4. To unstage everything (before commit):
   git rm --cached -r .

5. Add again (now gitignore will be respected):
   git add .

6. Commit:
   git commit -m "Initial commit"

---------------------------

TIPS

✔ Always use lowercase: `.gitignore` (name matters!)
✔ Use `ls -a` to see hidden files
✔ Check status before committing with `git status`
✔ Use prebuilt gitignore templates from:
   https://github.com/github/gitignore

---------------------------

WHY IS IT IMPORTANT?

- Protects your sensitive data
- Keeps your repo clean
- Avoids uploading unnecessary files to GitHub

---------------------------------------------------------------------------------------------------
Lesson 2: Cloning GitHub Repositories and Running Projects Locally
==================================================================

What is Cloning?
----------------
- Cloning is copying a GitHub repository to your local computer.
- This includes all files and the entire commit history.
- Command: 
  git clone <repository-URL>

Why Clone a Repository?
------------------------
- To get your own copy of a project.
- You can:
  - Customize or add features.
  - Fix bugs.
  - Study and learn from the code.
  - Self-host tools like games or apps.

Example 1: Running the QuakeJS Game
------------------------------------
1. Clone the repository:
   git clone https://github.com/quakejs/quakejs.git

2. Move into the folder:
   cd quakejs

3. Install required packages:
   npm install

4. Set up the content server (use command from README):
   npm run <command>

5. Run the game server:
   node <start-command>

6. Open in browser:
   http://localhost:8080

Example 2: Running Word Mastermind (Wordle Clone)
--------------------------------------------------
1. Clone the repository:
   git clone https://github.com/<username>/word-mastermind.git

2. Move into the folder:
   cd word-mastermind

3. Install dependencies:
   npm install

4. Start the app:
   npm start

5. Open in browser:
   http://localhost:3000

6. Explore and modify:
   - dict/ folder contains the word list.
   - src/ folder contains the game logic.
   - You can customize text, colors, gameplay, etc.

Key Takeaways
--------------
- 'git clone' downloads a full project from GitHub.
- You can run, modify, and learn from these open-source projects.
- Studying real projects helps you become a better developer.

Bonus: Open-Source Contributions for Beginners
-----------------------------------------------
- Check out this GitHub repo: https://github.com/MunGell/awesome-for-beginners
- Contains beginner-friendly projects you can contribute to.
- Some example projects:
  - AncientBeast – A strategy game.
  - Brave Browser – A privacy-focused web browser.

--------------------------------------------------------------------------------------------
📄  GIT BRANCHING NOTES (Windows PowerShell)  📄
Save or print this plain‑text file for quick reference.
────────────────────────────────────────────────────────

WHAT IS BRANCHING?
──────────────────
• Branching lets you work on new ideas/features without changing the main project.
• You can experiment safely and merge only when ready.
• Main branch = stable version
• Other branches = feature updates, bug fixes, experiments

1.  CREATE A NEW BRANCH
    ----------------------------------------------------
    > git branch alien-plot     # creates new branch
    > git branch                # shows all branches
      • * = current branch

2.  SWITCH TO A BRANCH
    ----------------------------------------------------
    > git checkout alien-plot   # switch to that branch
    > git checkout -b alien-plot
      # shortcut: create + switch in 1 step

3.  MAKE CHANGES AND COMMIT
    ----------------------------------------------------
    > code ch1.txt              # open and edit file
    > git add .                 # stage all changes
    > git commit -m "alien theme added to ch1 and ch2"

4.  SWITCH BACK TO MAIN
    ----------------------------------------------------
    > git checkout main         # return to main branch

5.  CONTINUE WORKING ON MAIN
    ----------------------------------------------------
    > touch chapter4.txt
    > code chapter4.txt         # write more content
    > git add .
    > git commit -m "add chapter 4"

6.  MERGE BRANCH INTO MAIN
    ----------------------------------------------------
    > git checkout main         # make sure you're on main
    > git merge alien-plot      # merge alien branch into main

    ⚠️ If Vim opens:
      Type:  :q!                # to quit without editing merge message

7.  PUSH CHANGES TO GITHUB
    ----------------------------------------------------
    > git push -u origin main   # push main branch to GitHub

8.  VIEW HISTORY
    ----------------------------------------------------
    > git log                   # view commits
    > git log --oneline --graph --all
      • view visual commit tree

9.  DELETE BRANCH (optional)
    ----------------------------------------------------
    > git branch -d alien-plot  # delete local branch after merge

────────────────────────────────────────────────────────
QUICK COMMAND CHEAT‑SHEET
────────────────────────────────────────────────────────
git branch <name>         create new branch
git branch                list branches
git checkout <name>       switch to branch
git checkout -b <name>    create + switch
git add .                 stage all changes
git commit -m "msg"       save changes
git merge <branch>        merge into current branch
git log                   commit history
git push -u origin main   push to GitHub
git branch -d <branch>    delete branch (after merge)
────────────────────────────────────────────────────────

📌 WHY USE BRANCHES?

✔️ Keep main code clean
✔️ Try new features safely
✔️ Collaborate without conflict
✔️ Merge only tested code
✔️ Work in parallel with teammates

────────────────────────────────────────────────────────
🧪 TIP: Practice by creating a small story repo and 
make alien/fantasy/romantic versions using branches!
────────────────────────────────────────────────────────

